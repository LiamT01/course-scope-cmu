//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Teaches = newTeachesTable("public", "teaches", "")

type teachesTable struct {
	postgres.Table

	// Columns
	OfferingID   postgres.ColumnInteger
	InstructorID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TeachesTable struct {
	teachesTable

	EXCLUDED teachesTable
}

// AS creates new TeachesTable with assigned alias
func (a TeachesTable) AS(alias string) *TeachesTable {
	return newTeachesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TeachesTable with assigned schema name
func (a TeachesTable) FromSchema(schemaName string) *TeachesTable {
	return newTeachesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TeachesTable with assigned table prefix
func (a TeachesTable) WithPrefix(prefix string) *TeachesTable {
	return newTeachesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TeachesTable with assigned table suffix
func (a TeachesTable) WithSuffix(suffix string) *TeachesTable {
	return newTeachesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTeachesTable(schemaName, tableName, alias string) *TeachesTable {
	return &TeachesTable{
		teachesTable: newTeachesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newTeachesTableImpl("", "excluded", ""),
	}
}

func newTeachesTableImpl(schemaName, tableName, alias string) teachesTable {
	var (
		OfferingIDColumn   = postgres.IntegerColumn("offering_id")
		InstructorIDColumn = postgres.IntegerColumn("instructor_id")
		allColumns         = postgres.ColumnList{OfferingIDColumn, InstructorIDColumn}
		mutableColumns     = postgres.ColumnList{}
	)

	return teachesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OfferingID:   OfferingIDColumn,
		InstructorID: InstructorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
