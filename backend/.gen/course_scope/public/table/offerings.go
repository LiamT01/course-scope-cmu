//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Offerings = newOfferingsTable("public", "offerings", "")

type offeringsTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	CourseID postgres.ColumnInteger
	Semester postgres.ColumnString
	Year     postgres.ColumnInteger
	Location postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OfferingsTable struct {
	offeringsTable

	EXCLUDED offeringsTable
}

// AS creates new OfferingsTable with assigned alias
func (a OfferingsTable) AS(alias string) *OfferingsTable {
	return newOfferingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OfferingsTable with assigned schema name
func (a OfferingsTable) FromSchema(schemaName string) *OfferingsTable {
	return newOfferingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OfferingsTable with assigned table prefix
func (a OfferingsTable) WithPrefix(prefix string) *OfferingsTable {
	return newOfferingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OfferingsTable with assigned table suffix
func (a OfferingsTable) WithSuffix(suffix string) *OfferingsTable {
	return newOfferingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOfferingsTable(schemaName, tableName, alias string) *OfferingsTable {
	return &OfferingsTable{
		offeringsTable: newOfferingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newOfferingsTableImpl("", "excluded", ""),
	}
}

func newOfferingsTableImpl(schemaName, tableName, alias string) offeringsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		CourseIDColumn = postgres.IntegerColumn("course_id")
		SemesterColumn = postgres.StringColumn("semester")
		YearColumn     = postgres.IntegerColumn("year")
		LocationColumn = postgres.StringColumn("location")
		allColumns     = postgres.ColumnList{IDColumn, CourseIDColumn, SemesterColumn, YearColumn, LocationColumn}
		mutableColumns = postgres.ColumnList{CourseIDColumn, SemesterColumn, YearColumn, LocationColumn}
	)

	return offeringsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		CourseID: CourseIDColumn,
		Semester: SemesterColumn,
		Year:     YearColumn,
		Location: LocationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
