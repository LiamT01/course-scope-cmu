//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Ratings = newRatingsTable("public", "ratings", "")

type ratingsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UserID     postgres.ColumnInteger
	OfferingID postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	Overall    postgres.ColumnInteger
	Teaching   postgres.ColumnInteger
	Materials  postgres.ColumnInteger
	Value      postgres.ColumnInteger
	Difficulty postgres.ColumnInteger
	Workload   postgres.ColumnInteger
	Grading    postgres.ColumnInteger
	Comment    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RatingsTable struct {
	ratingsTable

	EXCLUDED ratingsTable
}

// AS creates new RatingsTable with assigned alias
func (a RatingsTable) AS(alias string) *RatingsTable {
	return newRatingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RatingsTable with assigned schema name
func (a RatingsTable) FromSchema(schemaName string) *RatingsTable {
	return newRatingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RatingsTable with assigned table prefix
func (a RatingsTable) WithPrefix(prefix string) *RatingsTable {
	return newRatingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RatingsTable with assigned table suffix
func (a RatingsTable) WithSuffix(suffix string) *RatingsTable {
	return newRatingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRatingsTable(schemaName, tableName, alias string) *RatingsTable {
	return &RatingsTable{
		ratingsTable: newRatingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newRatingsTableImpl("", "excluded", ""),
	}
}

func newRatingsTableImpl(schemaName, tableName, alias string) ratingsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		OfferingIDColumn = postgres.IntegerColumn("offering_id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		OverallColumn    = postgres.IntegerColumn("overall")
		TeachingColumn   = postgres.IntegerColumn("teaching")
		MaterialsColumn  = postgres.IntegerColumn("materials")
		ValueColumn      = postgres.IntegerColumn("value")
		DifficultyColumn = postgres.IntegerColumn("difficulty")
		WorkloadColumn   = postgres.IntegerColumn("workload")
		GradingColumn    = postgres.IntegerColumn("grading")
		CommentColumn    = postgres.StringColumn("comment")
		allColumns       = postgres.ColumnList{IDColumn, UserIDColumn, OfferingIDColumn, CreatedAtColumn, UpdatedAtColumn, OverallColumn, TeachingColumn, MaterialsColumn, ValueColumn, DifficultyColumn, WorkloadColumn, GradingColumn, CommentColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, OfferingIDColumn, CreatedAtColumn, UpdatedAtColumn, OverallColumn, TeachingColumn, MaterialsColumn, ValueColumn, DifficultyColumn, WorkloadColumn, GradingColumn, CommentColumn}
	)

	return ratingsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserID:     UserIDColumn,
		OfferingID: OfferingIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		Overall:    OverallColumn,
		Teaching:   TeachingColumn,
		Materials:  MaterialsColumn,
		Value:      ValueColumn,
		Difficulty: DifficultyColumn,
		Workload:   WorkloadColumn,
		Grading:    GradingColumn,
		Comment:    CommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
