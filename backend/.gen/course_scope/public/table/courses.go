//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Courses = newCoursesTable("public", "courses", "")

type coursesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Number      postgres.ColumnString
	Name        postgres.ColumnString
	Department  postgres.ColumnString
	Units       postgres.ColumnInteger
	Description postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CoursesTable struct {
	coursesTable

	EXCLUDED coursesTable
}

// AS creates new CoursesTable with assigned alias
func (a CoursesTable) AS(alias string) *CoursesTable {
	return newCoursesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CoursesTable with assigned schema name
func (a CoursesTable) FromSchema(schemaName string) *CoursesTable {
	return newCoursesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CoursesTable with assigned table prefix
func (a CoursesTable) WithPrefix(prefix string) *CoursesTable {
	return newCoursesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CoursesTable with assigned table suffix
func (a CoursesTable) WithSuffix(suffix string) *CoursesTable {
	return newCoursesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCoursesTable(schemaName, tableName, alias string) *CoursesTable {
	return &CoursesTable{
		coursesTable: newCoursesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCoursesTableImpl("", "excluded", ""),
	}
}

func newCoursesTableImpl(schemaName, tableName, alias string) coursesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NumberColumn      = postgres.StringColumn("number")
		NameColumn        = postgres.StringColumn("name")
		DepartmentColumn  = postgres.StringColumn("department")
		UnitsColumn       = postgres.IntegerColumn("units")
		DescriptionColumn = postgres.StringColumn("description")
		allColumns        = postgres.ColumnList{IDColumn, NumberColumn, NameColumn, DepartmentColumn, UnitsColumn, DescriptionColumn}
		mutableColumns    = postgres.ColumnList{NumberColumn, NameColumn, DepartmentColumn, UnitsColumn, DescriptionColumn}
	)

	return coursesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Number:      NumberColumn,
		Name:        NameColumn,
		Department:  DepartmentColumn,
		Units:       UnitsColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
